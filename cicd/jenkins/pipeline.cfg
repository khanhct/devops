def appSourceRepo = 'https://github.com/khanhct/testflow.git'
def appSourceBranch = 'main'

def dockerhubAccount = 'registry_credential'
def githubAccount = 'github_credential'

def argocd_url = '58.186.205.176'
def argocd_app = 'app-demo'

def helmSourceRepo = "https://github.com/khanhct/testflow-helm.git"
def appConfigBranch = 'main'
def helmRepo = "testflow-helm"
def helmChart = "app-demo"
def helmValueFile = "app-demo/app-demo-value.yaml"

dockerBuildCommand = './'
def version = "v1.${BUILD_NUMBER}"

pipeline {
    agent any    
   
    environment {
        DOCKER_REGISTRY = 'https://reg.fptcompute.com.vn'
        DOCKER_IMAGE_NAME = "portal-new/demo-app"
        DOCKER_IMAGE = "reg.fptcompute.com.vn/${DOCKER_IMAGE_NAME}"
    }

    stages {        
        stage('Checkout project') {
          steps {
            git branch: appSourceBranch,
                credentialsId: githubAccount,
                url: appSourceRepo
          }
        }
        stage('Build And Push Docker Image') {
            steps {
                script {
                    sh "git reset --hard"
                    sh "git clean -f"                    
					app = docker.build(DOCKER_IMAGE_NAME, dockerBuildCommand)
                    docker.withRegistry( DOCKER_REGISTRY, dockerhubAccount ) {
                       app.push(version)
                    }

                    sh "docker rmi ${DOCKER_IMAGE_NAME} -f"
                    sh "docker rmi ${DOCKER_IMAGE}:${version} -f"
                }
            }
        }

        stage('Triggering argocd to deploy automatically') {
            steps {
				withCredentials([usernamePassword(credentialsId: 'github_credential', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    sh """#!/bin/bash
                        [[ -d ${helmRepo} ]] && rm -r ${helmRepo}
					    git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/khanhct/testflow-helm.git --branch ${appConfigBranch}
					    cd ${helmRepo}
					    sed -i 's|  tag: .*|  tag: "${version}"|' ${helmValueFile}
                        git config --global user.email "khanhct@gmail.com"
                        git config --global user.name ${GIT_USERNAME}
					    git add . ; git commit -m "Update to version ${version}";git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/khanhct/testflow-helm.git
					    cd ..
					    [[ -d ${helmRepo} ]] && rm -r ${helmRepo}
					
					   """	
                }
            }
        }
    }
}
